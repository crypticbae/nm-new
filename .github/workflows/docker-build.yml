name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Timeout nach 15 Minuten
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image (Main Build)
      id: docker-build
      uses: docker/build-push-action@v5
      continue-on-error: true
      with:
        context: .
        platforms: linux/amd64  # Nur AMD64 für Geschwindigkeit
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docker image (Fallback)
      if: steps.docker-build.outcome == 'failure'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.simple
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Generate deployment info
      run: |
        echo "🚀 Docker Image wurde erfolgreich gebaut und gepusht!" >> $GITHUB_STEP_SUMMARY
        echo "📦 Image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "🐳 Verwende dieses Image in deiner docker-compose.yml:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
        echo "services:" >> $GITHUB_STEP_SUMMARY
        echo "  neonmurer-website:" >> $GITHUB_STEP_SUMMARY
        echo "    image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "    ports:" >> $GITHUB_STEP_SUMMARY
        echo "      - \"3000:3000\"" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY 