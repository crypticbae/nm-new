# Dockerfile für automatisches Git-Clone und Build
FROM node:18-alpine AS git-clone

# Git installieren
RUN apk add --no-cache git

# Arbeitsverzeichnis erstellen
WORKDIR /app

# Repository klonen (URL wird als Build-Arg übergeben)
ARG REPO_URL
ARG BRANCH=main

RUN if [ -z "$REPO_URL" ]; then \
        echo "FEHLER: REPO_URL muss als Build-Arg übergeben werden"; \
        echo "Beispiel: docker build --build-arg REPO_URL=https://github.com/user/repo.git ."; \
        exit 1; \
    fi

RUN git clone --branch ${BRANCH} --single-branch ${REPO_URL} . && \
    rm -rf .git

# Dependencies Stage
FROM node:18-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Package files aus git-clone kopieren
COPY --from=git-clone /app/package.json /app/package-lock.json* ./
RUN npm ci --only=production

# Build Stage
FROM node:18-alpine AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY --from=git-clone /app .

# Next.js telemetry deaktivieren
ENV NEXT_TELEMETRY_DISABLED 1

# Build für Produktion
RUN npm run build

# Production Stage
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Benutzer für Sicherheit erstellen
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Build files kopieren
COPY --from=builder /app/public ./public

# Standalone files für optimierte Deployment
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

# Port exposieren
EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Start command
CMD ["node", "server.js"] 